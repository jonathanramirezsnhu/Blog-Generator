# The general purpose of this program is to send data with instructions 
# to a server own by OpenAI, Then we will recieve a response back from that server
# and display it. 

import openai #The API we will be using from OpenAI
from dotenv import dotenv_values #import our environment variables

config = dotenv_values(".env") # The dotenv_values takes in the path to the .env file and returns a dictionary with all the variables in the .env file
openai.api_key = config['API_KEY']

# Takes in a prompt as user input and generates a paragraph about that prompt
def generate_blog(paragraph_topic):
    # Store the result generated by the output of the completions.create() method and store it in a variable
    # called response
    response = openai.completions.create( # Completion endpoint which generates text based on the prompt
        model = 'gpt-3.5-turbo-instruct', # We specify a model. This one provides clear nad reliable examples. Many area available for specific purposes on OpenAI 
        prompt = 'Write a paragraph about the following topic. ' + paragraph_topic, # First we tell GPT-3 what to do with the user prompt (can be any instructions), we then take in the user prompt 
        max_tokens = 400, # The token number decides how long the response is going to be. Also, this specific model has a token limit of 4,096
        temperature = 0.3 # Range( 0 -1) Determines the randomness of the response. Higher temp = produces more creative response. Lower temp = produces more well-defined response 
    )

    retrieve_blog = response.choices[0].text # Retrieves only the text field containing the generated text from a list of choices that are stored in the response variable

    return retrieve_blog # Return the text generated 

keep_writing = True
# Will keep generating paragraphs of topics until the user enters no which will exit the loop
# and end the program
while keep_writing:
    answer = input('Write a paragraph? Y for yes, anything else for no.> ')
    if (answer == 'Y'):
        paragraph_topic = input('What should this paragraph talk about?> ')
        print(generate_blog(paragraph_topic))
    else:
        keep_writing = False